"use strict";
Object.defineProperty(exports, "OpenAIFree", {
    enumerable: true,
    get: function() {
        return OpenAIFree;
    }
});
const _uuid = require("uuid");
const _axios = require("axios");
const _util = require("util");
let OpenAIFree = class OpenAIFree {
    // this model has hourly limit
    async createChatCompletion(request, customVariable) {
        var _customVariable_parentMessageId;
        const body = {
            action: 'next',
            messages: request.messages.map((message)=>({
                    id: (0, _uuid.v4)(),
                    role: message.role,
                    author: {
                        role: message.role
                    },
                    content: {
                        content_type: 'text',
                        parts: [
                            message.content
                        ]
                    }
                })),
            model: 'text-davinci-002-render-sha',
            parent_message_id: (_customVariable_parentMessageId = customVariable == null ? void 0 : customVariable.parentMessageId) != null ? _customVariable_parentMessageId : (0, _uuid.v4)(),
            conversation_id: customVariable == null ? void 0 : customVariable.conversationId
        };
        const decoder = new _util.TextDecoder('utf-8');
        const result = await new Promise((resolve, reject)=>{
            this.axios.post('/api/conversation', body, {
                responseType: 'stream'
            }).then(({ data  })=>{
                let cache = '';
                data.on('data', (buffer)=>{
                    const text = decoder.decode(buffer);
                    cache += text;
                });
                data.on('end', ()=>{
                    const messages = cache.split('\n\n');
                    const lastMessage = messages[messages.length - 3].replace('data:', '');
                    resolve(JSON.parse(lastMessage));
                });
            }).catch((error)=>{
                try {
                    var _ref, // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                    _error_response;
                    var _read;
                    const text = decoder.decode((_read = (_ref = (_error_response = error.response) == null ? void 0 : _error_response.data) == null ? void 0 : _ref.read()) != null ? _read : []);
                    reject(text);
                } catch (e) {
                    reject(error);
                }
            });
        });
        await this.deleteConversation(result.conversation_id);
        return {
            id: result.message.id,
            object: '',
            created: result.message.create_time,
            model: result.message.metadata.model_slug,
            choices: [
                {
                    message: {
                        role: 'assistant',
                        content: result.message.content.parts.join('\n')
                    }
                }
            ],
            usage: {
                prompt_tokens: 0,
                completion_tokens: 0,
                total_tokens: 0
            }
        };
    }
    async deleteConversation(conversationId) {
        await this.axios.patch(`/api/conversation/${conversationId}`, {
            is_visible: false
        });
    }
    constructor(openAiUrl, accessToken){
        this.axios = _axios.default.create({
            baseURL: openAiUrl,
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36',
                'Content-Type': 'application/json'
            }
        });
    }
};

//# sourceMappingURL=OpenAIFree.js.map