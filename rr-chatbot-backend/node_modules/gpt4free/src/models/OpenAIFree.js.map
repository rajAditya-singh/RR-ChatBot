{"version":3,"sources":["../../../../../packages/gpt4free/src/models/OpenAIFree.ts"],"sourcesContent":["import {\n  CreateChatCompletionRequest,\n  CreateChatCompletionResponse,\n} from 'openai';\nimport { v4 as uuidv4 } from 'uuid';\nimport axios, { Axios, AxiosError } from 'axios';\nimport { IncomingMessage } from 'http';\nimport { TextDecoder } from 'util';\nimport { FreeGPTModel } from './FreeGPTModel';\n\ninterface BodyMessage {\n  id: string;\n  role: string;\n  author: {\n    role: string;\n  };\n  content: {\n    content_type: string;\n    parts: string[];\n  };\n}\n\ninterface Body {\n  action: string;\n  messages: BodyMessage[];\n  model: string;\n  parent_message_id: string;\n  conversation_id?: string;\n}\n\ninterface ChatCompletResult {\n  message: {\n    id: string;\n    author: { role: 'assistant'; name: null; metadata: unknown };\n    create_time: number;\n    update_time: null;\n    content: {\n      content_type: 'text';\n      parts: string[];\n    };\n    status: 'finished_successfully';\n    end_turn: true;\n    weight: 1.0;\n    metadata: {\n      message_type: 'next';\n      model_slug: 'text-davinci-002-render-sha';\n      finish_details: { type: 'stop'; stop: '<|diff_marker|>' };\n    };\n    recipient: 'all';\n  };\n  conversation_id: string;\n  error: null;\n}\n\nexport class OpenAIFree implements FreeGPTModel {\n  private axios: Axios;\n\n  constructor(openAiUrl: string, accessToken: string) {\n    this.axios = axios.create({\n      baseURL: openAiUrl,\n      headers: {\n        Authorization:\n          `Bearer ${accessToken}`,\n        'User-Agent':\n          'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36',\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  // this model has hourly limit\n  async createChatCompletion(\n    request: CreateChatCompletionRequest,\n    customVariable?: { conversationId?: string; parentMessageId?: string },\n  ): Promise<CreateChatCompletionResponse> {\n    const body: Body = {\n      action: 'next',\n      messages: request.messages.map((message) => ({\n        id: uuidv4(),\n        role: message.role,\n        author: {\n          role: message.role,\n        },\n        content: {\n          content_type: 'text',\n          parts: [message.content],\n        },\n      })),\n      model: 'text-davinci-002-render-sha',\n      parent_message_id: customVariable?.parentMessageId ?? uuidv4(),\n      conversation_id: customVariable?.conversationId,\n    };\n    const decoder = new TextDecoder('utf-8');\n    const result = await new Promise<ChatCompletResult>((resolve, reject) => {\n      this.axios\n        .post<IncomingMessage>('/api/conversation', body, {\n        responseType: 'stream',\n      })\n        .then(({ data }) => {\n          let cache = '';\n          data.on('data', (buffer: Buffer) => {\n            const text = decoder.decode(buffer);\n            cache += text;\n          });\n          data.on('end', () => {\n            const messages = cache.split('\\n\\n');\n            const lastMessage = messages[messages.length - 3].replace(\n              'data:',\n              '',\n            );\n            resolve(JSON.parse(lastMessage) as ChatCompletResult);\n          });\n        })\n        .catch((error: AxiosError) => {\n          try {\n            const text = decoder.decode(\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n              (error.response?.data as IncomingMessage)?.read() ?? [],\n            );\n            reject(text);\n          } catch (e) {\n            reject(error);\n          }\n        });\n    });\n    await this.deleteConversation(result.conversation_id);\n    return {\n      id: result.message.id,\n      object: '',\n      created: result.message.create_time,\n      model: result.message.metadata.model_slug,\n      choices: [\n        {\n          message: {\n            role: 'assistant',\n            content: result.message.content.parts.join('\\n'),\n          },\n        },\n      ],\n      usage: {\n        prompt_tokens: 0,\n        completion_tokens: 0,\n        total_tokens: 0,\n      },\n    };\n  }\n\n  async deleteConversation(conversationId: string): Promise<void> {\n    await this.axios.patch(`/api/conversation/${conversationId}`, { is_visible: false });\n  }\n}\n"],"names":["OpenAIFree","createChatCompletion","request","customVariable","body","action","messages","map","message","id","uuidv4","role","author","content","content_type","parts","model","parent_message_id","parentMessageId","conversation_id","conversationId","decoder","TextDecoder","result","Promise","resolve","reject","axios","post","responseType","then","data","cache","on","buffer","text","decode","split","lastMessage","length","replace","JSON","parse","catch","error","response","read","e","deleteConversation","object","created","create_time","metadata","model_slug","choices","join","usage","prompt_tokens","completion_tokens","total_tokens","patch","is_visible","constructor","openAiUrl","accessToken","create","baseURL","headers","Authorization"],"mappings":";+BAsDaA;;;eAAAA;;;sBAlDgB;uBACY;sBAEb;AA+CrB,IAAA,AAAMA,aAAN,MAAMA;IAgBX,8BAA8B;IAC9B,MAAMC,qBACJC,OAAoC,EACpCC,cAAsE,EAC/B;YAelBA;QAdrB,MAAMC,OAAa;YACjBC,QAAQ;YACRC,UAAUJ,QAAQI,SAASC,IAAI,CAACC,UAAa,CAAA;oBAC3CC,IAAIC,IAAAA;oBACJC,MAAMH,QAAQG;oBACdC,QAAQ;wBACND,MAAMH,QAAQG;oBAChB;oBACAE,SAAS;wBACPC,cAAc;wBACdC,OAAO;4BAACP,QAAQK;yBAAQ;oBAC1B;gBACF,CAAA;YACAG,OAAO;YACPC,mBAAmBd,CAAAA,kCAAAA,yBAAAA,KAAAA,IAAAA,eAAgBe,2BAAhBf,kCAAmCO,IAAAA;YACtDS,iBAAiBhB,yBAAAA,KAAAA,IAAAA,eAAgBiB;QACnC;QACA,MAAMC,UAAU,IAAIC,kBAAY;QAChC,MAAMC,SAAS,MAAM,IAAIC,QAA2B,CAACC,SAASC;YAC5D,IAAI,CAACC,MACFC,KAAsB,qBAAqBxB,MAAM;gBAClDyB,cAAc;YAChB,GACGC,KAAK,CAAC,EAAEC,KAAI,EAAE;gBACb,IAAIC,QAAQ;gBACZD,KAAKE,GAAG,QAAQ,CAACC;oBACf,MAAMC,OAAOd,QAAQe,OAAOF;oBAC5BF,SAASG;gBACX;gBACAJ,KAAKE,GAAG,OAAO;oBACb,MAAM3B,WAAW0B,MAAMK,MAAM;oBAC7B,MAAMC,cAAchC,QAAQ,CAACA,SAASiC,SAAS,EAAE,CAACC,QAChD,SACA;oBAEFf,QAAQgB,KAAKC,MAAMJ;gBACrB;YACF,GACCK,MAAM,CAACC;gBACN,IAAI;wBAGA,MADA,iEAAiE;oBAChEA;wBAAD;oBAFF,MAAMT,OAAOd,QAAQe,OAEnB,CAAA,QAAA,CAAA,OAACQ,CAAAA,kBAAAA,MAAMC,oBAAND,KAAAA,IAAAA,gBAAgBb,gBAAjB,KAAA,IAAA,KAA2Ce,kBAA3C,QAAqD,EAAE;oBAEzDpB,OAAOS;gBACT,EAAE,OAAOY,GAAG;oBACVrB,OAAOkB;gBACT;YACF;QACJ;QACA,MAAM,IAAI,CAACI,mBAAmBzB,OAAOJ;QACrC,OAAO;YACLV,IAAIc,OAAOf,QAAQC;YACnBwC,QAAQ;YACRC,SAAS3B,OAAOf,QAAQ2C;YACxBnC,OAAOO,OAAOf,QAAQ4C,SAASC;YAC/BC,SAAS;gBACP;oBACE9C,SAAS;wBACPG,MAAM;wBACNE,SAASU,OAAOf,QAAQK,QAAQE,MAAMwC,KAAK;oBAC7C;gBACF;aACD;YACDC,OAAO;gBACLC,eAAe;gBACfC,mBAAmB;gBACnBC,cAAc;YAChB;QACF;IACF;IAEA,MAAMX,mBAAmB5B,cAAsB,EAAiB;QAC9D,MAAM,IAAI,CAACO,MAAMiC,MAAM,CAAC,kBAAkB,EAAExC,eAAe,CAAC,EAAE;YAAEyC,YAAY;QAAM;IACpF;IA5FAC,YAAYC,SAAiB,EAAEC,WAAmB,CAAE;QAClD,IAAI,CAACrC,QAAQA,eAAMsC,OAAO;YACxBC,SAASH;YACTI,SAAS;gBACPC,eACE,CAAC,OAAO,EAAEJ,YAAY,CAAC;gBACzB,cACE;gBACF,gBAAgB;YAClB;QACF;IACF;AAkFF"}